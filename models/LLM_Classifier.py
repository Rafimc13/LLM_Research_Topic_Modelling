from tqdm import tqdm
from sklearn.metrics import classification_report
import re

from utils import load_prompt
from utils.GPT_Prompting import PromptingGPT
from utils.load_prompt import get_prompt


def GPT_Classifier(comments, name_of_prompt, GPT_model):
    """
    Perform classification of comments using GPT models.

    Parameters:
    - comments: list of str
    List containing comments to classify.
    - name_of_prompt: str
    name of the preferred prompt
    - GPT model: str
    GPT model used for Classification

    Returns:
    - labels_final: list of int
    List of integer labels corresponding to the classification results.
    """

    labels = []
    for comment in tqdm(comments):
        try:
            gpt_prompts = PromptingGPT()  # Create a new instance of GPT model in each iteration
            prompt_for_classification = load_prompt.load_chosen_prompt(name_of_prompt)
            prompt = get_prompt(prompt_for_classification, comment)
            response = gpt_prompts.make_prompts(prompt, GPT_model=GPT_model).strip()

            # Find all digits in the response
            matches = re.findall(r'\d+', response)

            # Convert found matches to integers and add to the list
            if matches:
                label = int(matches[0])
                print(f'Chosen label from GPT model is: {label}')
            else:
                print('No label found in the response of GPT model. Use label 0 for default value')
                label = 0

        except Exception as e:
            print(f"Error processing comment '{comment}': {e}")
            label = 0
        labels.append(label)

    return labels


def validate_GPT_model(true_labels, predicted_labels):
    """
    Validate the classification results.

    Parameters:
    - true_labels: list of int
      List of true labels for the comments.

    - predicted_labels: list of int
      List of predicted labels generated by the classifier.

    Returns:
    -cls report:
    Return the cls report for GPT model
    """

    # Print classification report
    cls_report = classification_report(true_labels, predicted_labels)
    print(cls_report)
    return cls_report
